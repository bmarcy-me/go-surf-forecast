services:
  postgres:
    image: postgres:16.4-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5

  db_init:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: db_init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      STORMGLASS_API_KEY: ${STORMGLASS_API_KEY}
      WEATHER_DATA_SOURCE: ${WEATHER_DATA_SOURCE}
    entrypoint: ["./setup_db" ]

  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: api
    depends_on:
      db_init:
        condition: service_completed_successfully
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      STORMGLASS_API_KEY: ${STORMGLASS_API_KEY}
      WEATHER_DATA_SOURCE: ${WEATHER_DATA_SOURCE}
    ports:
      - "8080:8080"
    entrypoint: ["./server"]

volumes:
  postgres_data: